; IRA V1.05beta (9.6.95) (c)1993-95 Tim Ruehsen (SiliconSurfer/PHANTASM)

	INCLUDE 'include/hardware/custom.i'
	INCLUDE 'include/hardware/hw_examples.i'

ABSEXECBASE	EQU	$4
AUTO_INT2	EQU	$68
AUTO_INT3	EQU	$6C
TRAP_01		EQU	$80
EXT_0004	EQU	$82
TRAP_02		EQU	$84
EXT_0006	EQU	$86
TRAP_03		EQU	$88
CIAA_PRA	EQU	$BFE001
CIAA_ICR	EQU	$BFED01

	SECTION S_0,CODE,CHIP

START:
; save the original register values to the stack.
	MOVEM.L	D0-D7/A0-A6,-(A7)

; open the graphics library
	MOVEA.L	ABSEXECBASE,A6		
	LEA		GFXNAME,A1		; libname = graphics.library
	MOVEQ	#0,D0			; version = 0
	JSR		(-552,A6)		; OpenLibrary(libName, version)
	MOVE.L	D0,GFXBASE	

; open the dos.library
	MOVEA.L	ABSEXECBASE,A6		
	LEA		DOSNAME,A1		; libname = dos.library
	MOVEQ	#0,D0			; version = 0
	JSR		(-552,A6)		; OpenLibrary(libName, version)
	MOVE.L	D0,DOSBASE	

; load the custom chipset base into A5.
	MOVEA.L	#CUSTOM,A5

; take control of the system.
	BSR		TAKESYSTEM

; move the addresses of the 3 visible bitplanes into the copper list
; these will be set to the bitplane registers in the copper list.
	MOVE.L	#LAB_0086,D0
	MOVE	D0,PL1L	
	SWAP	D0
	MOVE	D0,PL1H
	MOVE.L	#LAB_0088,D0
	MOVE	D0,PL2L
	SWAP	D0
	MOVE	D0,PL2H
	MOVE.L	#LAB_0089,D0
	MOVE	D0,PL3L
	SWAP	D0
	MOVE	D0,PL3H

; load the colours into the copper list.
	MOVEA.L	#COLOURPALETTE,A0
	MOVEA.L	#PALETTE,A1
	MOVEQ	#7,D1
	BSR		LoadColours		

; setup the copper
;	CLR.L	CUSTOM+SPR0DATA
	CLR.L   SPR0DATA(A5)		
	MOVE.L	#COPLIST,COP1LCH(A5)	; Move the address of the copper list to COP1LCH
	CLR		COPJMP1(A5)				; Clear COPJMP1
	MOVE	#$83C0,DMACON(A5)		; Set DMACON

; initialise the soundtracker module.
	JSR		mt_init

	LEA		(SCROLLER,PC),A3
MAIN:
; wait for the vertical raster beam to be in position.
	MOVEM.L	D0-D1,-(A7)
	MOVE.L	#$0000C800,D1
	BSR		WAITBEAM
	MOVEM.L	(A7)+,D0-D1

; play the music
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR		mt_music
	MOVEM.L	(A7)+,D0-D7/A0-A6

	BSR		CLS			;000CE: 61000192
	BSR		SINEBLIT		;000D2: 61000034
	BSR		SCROLLVISIBLE		;000D6: 6100008C

; loop if the left mouse button hasn't been pressed.
	BTST	#6,CIAA_PRA		
	BNE.S	MAIN			

; stop the soundtracker music
	JSR		mt_end

EXIT:
; restore the system.
	BSR		FREESYSTEM

; close the graphics library.
	MOVEA.L	ABSEXECBASE.W,A6
	MOVEA.L	(GFXBASE,PC),A1
	JSR		(-414,A6)

; close the dos.library
	MOVEA.L	(DOSBASE,PC),A1
	JSR		(-414,A6)

; restore the saved registers from the stack
	MOVEM.L	(A7)+,D0-D7/A0-A6

; return to the operating system
	RTS




SINEBLIT:
	LEA		LAB_008C,A0		;00108: 41F90001B4A8
	MOVEA.L	#LAB_0087,A2		;0010E: 247C00014424
	LEA		(SINEDATA,PC),A4	;00114: 49FA04B8
	ADDA.L	(SINEPTR,PC),A4		;00118: D9FA04AC
	ADDQ.L	#2,SINEPTR		;0011C: 54B9000005C6
	CMPI.L	#$000000FE,SINEPTR	;00122: 0CB9000000FE000005C6
	BNE.S	LAB_0004		;0012C: 660A
	SUBI.L	#$000000FE,SINEPTR	;0012E: 04B9000000FE000005C6
LAB_0004:
	MOVEQ	#11,D6			;00138: 7C0B
LAB_0005:
	MOVEA.L	A2,A1			;0013A: 224A
	MOVE	(A4),D0			;0013C: 3014
	LEA		(4,A4),A4		;0013E: 49EC0004
	CMPA.L	#SINEEND,A4		;00142: B9FC000006CC
	BLT.S	LAB_0006		;00148: 6D06
	SUBA.L	#$000000FE,A4		;0014A: 99FC000000FE
LAB_0006:
	MULS	#$0030,D0		;00150: C1FC0030
	ADDA.L	D0,A1			;00154: D3C0
	BSR		BLITTEXT		;00156: 61000082
	ADDQ.L	#4,A0			;0015A: 5888
	ADDQ.L	#4,A2			;0015C: 588A
	DBF		D6,LAB_0005		;0015E: 51CEFFDA
	RTS				;00162: 4E75


SCROLLVISIBLE:
	MOVE	(SPEED,PC),D1		;00164: 323A0464
	MOVE	D1,D0			;00168: 3001
	LSL		#4,D0			;0016A: E948
	OR		D1,D0			;0016C: 8041
	SUB		D0,SCRVAL		;0016E: 91790000057C
	BPL.S	LAB_0008		;00174: 6A62
	ADDI	#$0110,SCRVAL		;00176: 067901100000057C
	ADDQ	#2,PL1L			;0017E: 54790000058C
	ADDQ	#2,PL2L			;00184: 547900000594
	ADDQ	#2,PL3L			;0018A: 54790000059C
	SUBQ	#2,POINTEROFFSET	;00190: 5579000005CC
	BPL.S	LAB_0008		;00196: 6A40
	ADDQ	#4,POINTEROFFSET	;00198: 5879000005CC
	SUBQ	#4,PL1L			;0019E: 59790000058C
	SUBQ	#4,PL2L			;001A4: 597900000594
	SUBQ	#4,PL3L			;001AA: 59790000059C
	BSR		SCROLLHIDDEN		;001B0: 61000118
	BSR		DOCHAR			;001B4: 61000194
	ADDI.L	#$00000004,SINEPTR	;001B8: 06B900000004000005C6
	CMPI.L	#$000000FE,SINEPTR	;001C2: 0CB9000000FE000005C6
	BLT.S	LAB_0008		;001CC: 6D0A
	SUBI.L	#$000000FE,SINEPTR	;001CE: 04B9000000FE000005C6
LAB_0008:
	RTS				;001D8: 4E75

; Blit the text
; A0 - Source
; A1 - Destination
BLITTEXT:
	MOVEM.L	A0-A1,-(A7)
	BSR		BWAIT
	MOVE.L	#$FFFFFFFF,BLTAFWM(A5)	; Set BLTAFWM (blitter mask)
	MOVE	#$002C,BLTAMOD(A5)		; Set BLTAMOD (blitter modulo for source A)
	MOVE	#$002C,BLTDMOD(A5)		; Set BLTDMOD (blitter modulo for destination D)
	;MOVE	#$09F0,BLTCON0(A5)		; Set BLTCON0
	MOVE	#%000100111110000,BLTCON0(A5)	; Set BLTCON0 		
	MOVE	#$0000,BLTCON1(A5)		; Set BLTCON1
	BSR		BWAIT			
	MOVE.L	A0,BLTAPTH(A5)			; Set BLTAPTH
	MOVE.L	A1,BLTDPTH(A5)			; Set BLTDPTH
	MOVE	#$0802,BLTSIZE(A5)		; Set BLTSIZE
	ADDA.L	#$00002580,A0
	ADDA.L	#$00002580,A1
	BSR		BWAIT
	MOVE.L	A0,BLTAPTH(A5)			; Set BLTAPTH
	MOVE.L	A1,BLTDPTH(A5)			; Set BLTDPTH
	MOVE	#$0802,BLTSIZE(A5)		; Set BLTSIZE
	ADDA.L	#$00002580,A0
	ADDA.L	#$00002580,A1
	BSR		BWAIT
	MOVE.L	A0,BLTAPTH(A5)			; Set BLTAPTH
	MOVE.L	A1,BLTDPTH(A5)			; Set BLTDPTH
	MOVE	#$0802,BLTSIZE(A5)		; Set BLTSIZE
	ADDA.L	#$00002580,A0
	ADDA.L	#$00002580,A1
	MOVEM.L	(A7)+,A0-A1
	RTS


CLS:
	MOVEA.L	#LAB_0087,A0		;00262: 207C00014424
	BSR		BWAIT			;00268: 610001A6
	MOVE.L	A0,BLTDPTH(A5)		;0026C: 2B480054
	MOVE	#$0000,BLTDMOD(A5)		;00270: 3B7C00000066
	MOVE	#$0100,BLTCON0(A5)		;00276: 3B7C01000040
	MOVE	#$2818,BLTSIZE(A5)		;0027C: 3B7C28180058
	ADDA.L	#$00002580,A0		;00282: D1FC00002580
	BSR		BWAIT			;00288: 61000186
	MOVE.L	A0,BLTDPTH(A5)		;0028C: 2B480054
	MOVE	#$0000,BLTDMOD(A5)		;00290: 3B7C00000066
	MOVE	#$0100,BLTCON0(A5)		;00296: 3B7C01000040
	MOVE	#$2818,BLTSIZE(A5)		;0029C: 3B7C28180058
	ADDA.L	#$00002580,A0		;002A2: D1FC00002580
	BSR		BWAIT			;002A8: 61000166
	MOVE.L	A0,BLTDPTH(A5)		;002AC: 2B480054
	MOVE	#$0000,BLTDMOD(A5)		;002B0: 3B7C00000066
	MOVE	#$0100,BLTCON0(A5)		;002B6: 3B7C01000040
	MOVE	#$2818,BLTSIZE(A5)		;002BC: 3B7C28180058
	ADDA.L	#$00002580,A0		;002C2: D1FC00002580
	RTS				;002C8: 4E75


SCROLLHIDDEN:
	MOVE	#$09F0,BLTCON0(A5)		;002CA: 3B7C09F00040
	MOVE	#$0000,BLTCON1(A5)		;002D0: 3B7C00000042
	MOVE	#$0004,BLTAMOD(A5)		;002D6: 3B7C00040064
	MOVE	#$0004,BLTDMOD(A5)		;002DC: 3B7C00040066
	LEA		LAB_008C,A0		;002E2: 41F90001B4A8
	LEA		LAB_008B,A1		;002E8: 43F90001B4A4
	BSR		BWAIT			;002EE: 61000120
	MOVE.L	A0,BLTAPTH(A5)		;002F2: 2B480050
	MOVE.L	A1,BLTDPTH(A5)		;002F6: 2B490054
	MOVE	#$0816,BLTSIZE(A5)		;002FA: 3B7C08160058
	ADDA.L	#$00002580,A0		;00300: D1FC00002580
	ADDA.L	#$00002580,A1		;00306: D3FC00002580
	BSR		BWAIT			;0030C: 61000102
	MOVE.L	A0,BLTAPTH(A5)		;00310: 2B480050
	MOVE.L	A1,BLTDPTH(A5)		;00314: 2B490054
	MOVE	#$0816,BLTSIZE(A5)		;00318: 3B7C08160058
	ADDA.L	#$00002580,A0		;0031E: D1FC00002580
	ADDA.L	#$00002580,A1		;00324: D3FC00002580
	BSR		BWAIT			;0032A: 610000E4
	MOVE.L	A0,BLTAPTH(A5)		;0032E: 2B480050
	MOVE.L	A1,BLTDPTH(A5)		;00332: 2B490054
	MOVE	#$0816,BLTSIZE(A5)		;00336: 3B7C08160058
	ADDA.L	#$00002580,A0		;0033C: D1FC00002580
	ADDA.L	#$00002580,A1		;00342: D3FC00002580
	RTS				;00348: 4E75


DOCHAR:
	LEA		(ASCIIVALUES,PC),A1	;0034A: 43FA03E0
	LEA		(CHARACTEROFFSETS,PC),A2		;0034E: 45FA037C
	MOVEQ	#0,D0			;00352: 7000
NEWCHAR:
	MOVE.B	(A3)+,D0		;00354: 101B
	BNE.S	GOTLETTER		;00356: 6606
ENDOFSCROLL:
	LEA		(SCROLLER,PC),A3	;00358: 47FA0402
	BRA.S	NEWCHAR			;0035C: 60F6
GOTLETTER:
	CMP.B	#$05,D0			;0035E: B03C0005
	BNE.S	TRYAGAIN		;00362: 660A
	MOVE.B	(A3)+,D0		;00364: 101B
	MOVE	D0,SPEED		;00366: 33C0000005CA
	BRA.S	NEWCHAR			;0036C: 60E6
TRYAGAIN:
	MOVE	(A2)+,D2		;0036E: 341A
	CMP.B	(A1)+,D0		;00370: B019
	BNE.S	TRYAGAIN		;00372: 66FA
BLITLETTER:
	BSR		BWAIT			;00374: 6100009A
	MOVE.L	#$FFFFFFFF,(68,A5)	;00378: 2B7CFFFFFFFF0044
	MOVE	#$0024,BLTAMOD(A5)		;00380: 3B7C00240064
	MOVE	#$002C,BLTDMOD(A5)		;00386: 3B7C002C0066
	MOVE	#$09F0,BLTCON0(A5)		;0038C: 3B7C09F00040
	CLR		BLTCON1(A5)			;00392: 426D0042
	LEA		FONT,A0			;00396: 41F9000007BE
	ADDA	D2,A0			;0039C: D0C2
	LEA		LAB_008D,A1		;0039E: 43F90001B4D0
	BSR		BWAIT			;003A4: 6100006A
	MOVE.L	A0,BLTAPTH(A5)		;003A8: 2B480050
	MOVE.L	A1,BLTDPTH(A5)		;003AC: 2B490054
	MOVE	#$0802,BLTSIZE(A5)		; BLTSIZE (win/width, height) 0000100000000010    height = 32, width = 2
;	ADDA.L	#$00001F40,A0		; 8000 bytes (320x200 font size)
	ADDA.L	#$00001900,A0		; 6400 bytes (320x160 font size)
	ADDA.L	#$00002580,A1		; 9600 bytes (320x240 screen size)
	BSR		BWAIT			;003C2: 6100004C
	MOVE.L	A0,BLTAPTH(A5)		;003C6: 2B480050
	MOVE.L	A1,BLTDPTH(A5)		;003CA: 2B490054
	MOVE	#$0802,BLTSIZE(A5)		;003CE: 3B7C08020058
;	ADDA.L	#$00001F40,A0		;003D4: D1FC00001F40
	ADDA.L	#$00001900,A0
	ADDA.L	#$00002580,A1		;003DA: D3FC00002580
	BSR		BWAIT			;003E0: 6100002E
	MOVE.L	A0,BLTAPTH(A5)		;003E4: 2B480050
	MOVE.L	A1,BLTDPTH(A5)		;003E8: 2B490054
	MOVE	#$0802,BLTSIZE(A5)		;003EC: 3B7C08020058
;	ADDA.L	#$00001F40,A0		;003F2: D1FC00001F40
	ADDA.L	#$00001900,A0
	ADDA.L	#$00002580,A1		;003F8: D3FC00002580
	RTS				;003FE: 4E75


; Wait for the vertical raster position to be in the correct position.
; D1 - position to wait for.
WAITBEAM:
	MOVE.L	VPOSR(A5),D0		; Get VPOSR into D0
	ANDI.L	#$0001FF00,D0
	CMP.L	D1,D0
	BNE.S	WAITBEAM		
	RTS				

; Wait for the blitter to be free.
BWAIT:
	BTST    #$E,DMACONR(A5)		; test DMACONR
	BNE.S	BWAIT
	RTS


TAKESYSTEM:
	MOVE	(28,A5),SYSTEMINTS	; copy INTENAR
	MOVE	(2,A5),SYSTEMDMA	; copy DMACONR 
	MOVE	#$7FFF,(154,A5)		; set INTENA
	MOVE	#$7FFF,(150,A5)		; set DMACON
	MOVE.B	#$7F,CIAA_ICR		
	MOVE.L	AUTO_INT2,LEVEL2VECTOR	
	MOVE.L	AUTO_INT3,LEVEL3VECTOR	
	MOVE.L	TRAP_01,TRAP0ADDR	
	MOVE.L	EXT_0004,TRAP1ADDR
	MOVE.L	TRAP_02,TRAP2ADDR
	MOVE.L	EXT_0006,TRAP3ADDR
	MOVE.L	TRAP_03,TRAP4ADDR
	RTS				

FREESYSTEM:
	MOVE.L	LEVEL2VECTOR,AUTO_INT2
	MOVE.L	LEVEL3VECTOR,AUTO_INT3
	MOVE.L	TRAP0ADDR,TRAP_01
	MOVE.L	TRAP1ADDR,EXT_0004
	MOVE.L	TRAP2ADDR,TRAP_02
	MOVE.L	TRAP3ADDR,EXT_0006
	MOVE.L	TRAP4ADDR,TRAP_03
	MOVEA.L	GFXBASE,A1
	MOVE.L	(38,A1),CUSTOM+COP1LCH	
	MOVE.L	(50,A1),CUSTOM+COP2LCH	
	MOVE	SYSTEMINTS,D0
	ORI		#$C000,D0
	MOVE	D0,(154,A5)		; set INTENA
	MOVE	SYSTEMDMA,D0		
	ORI		#$8100,D0
	MOVE	D0,(150,A5)		; set DMACON
	MOVE.B	#$9B,CIAA_ICR
	RTS


SYSTEMINTS:
	DS.W	1			;00508
SYSTEMDMA:
	DS.W	1			;0050A
LEVEL2VECTOR:
	DS.L	1			;0050C
LEVEL3VECTOR:
	DS.L	1			;00510
TRAP0ADDR:
	DS.L	1			;00514
TRAP1ADDR:
	DS.L	1			;00518
TRAP2ADDR:
	DS.L	1			;0051C
TRAP3ADDR:
	DS.L	1			;00520
TRAP4ADDR:
	DS.L	1			;00524
DOSBASE:
	DS.L	1			;00528
GFXBASE:
	DS.L	1			;0052C
DOSNAME:
	DC.B	"dos.library",0
	EVEN
GFXNAME:
	DC.B	"graphics.library",0
	EVEN

; Load colours into the copper list.
; A0 - the address of the colours to copy to the copper list
; A1 - the address in the copper list to copy the colours to
; D1 - the number of colours to add
LoadColours:
	MOVE	#$0180,D0			; COLOR00 into D0
.LoadColourLoop:
	MOVE	D0,(A1)+			; write the COLOR0x register to the copper list
	ADDQ	#2,D0				; increment to the next COLOR0x register
	MOVE	(A0)+,(A1)+			; write the value of the colour to the copper list
	DBF		D1,.LoadColourLoop	; loop if we have more colours to add
	RTS							; return


; Copper List
COPLIST:
	DC.w	$01FC,$0000,$0106,$0000,$008E,$2C81,$0090,$F4C1
	DC.w	$0092,$0030,$0094,$00D0,$0100,$3200
	DC.W	$0102
SCRVAL:
	DC.w	$0000,$0108,$0006,$010A,$0006,$00E0
PL1H:
	DC.w	$0000,$00E2
PL1L:
	DC.w	$0000,$00E4
PL2H:
	DC.w	$0000,$00E6
PL2L:
	DC.w	$0000,$00E8
PL3H:
	DC.w	$0000,$00EA
PL3L:
	DC.W	$0000
PALETTE:
	DS.w	16			; reserve 16 words for the colour palette.
	DC.w	$FFFF,$FFFE	; impossible position so end of the copper list.
; end of copper list

	
WBCLIST:
	DS.L	1			;005C2
SINEPTR:
	DS.L	1			;005C6
SPEED:
	DC.W	$0002			;005CA
POINTEROFFSET:
	DS.W	1			;005CC

; Sinewave data table.
SINEDATA:
	DC.L	$00780075,$0072006C,$00690066,$00630060
	DC.L	$005D005A,$00570054,$0051004E,$004B0048
	DC.L	$00450042,$003F003C,$00390036,$00330030
	DC.L	$002D002A,$00270024,$0021001E,$001B0019
	DC.L	$00170015,$00130011,$000F000E,$000D000C
	DC.L	$000B000A,$000A0009,$00090008,$00080007
	DC.L	$00070006,$00060005,$00050004,$00040003
	DC.L	$00030002,$00020002,$00010001,$00010001
	DC.L	$00010001,$00020002,$00020003,$00030004
	DC.L	$00040005,$00050006,$00060007,$00070007
	DC.L	$00080008,$00090009,$000A000A,$000B000C
	DC.L	$000D000E,$000F0011,$00130015,$00170019
	DC.L	$001B001E,$00210024,$0027002A,$002D0030
	DC.L	$00330036,$0039003C,$003F0042,$00450048
	DC.L	$004B004E,$00510054,$0057005A,$005D0060
	DC.L	$00630066,$0069006C,$00720075
	DC.W	$0076
SINEEND:

; offsets of the characters in the font. - guess by Rob seems to offset by 40 bytes - 320 pixels
CHARACTEROFFSETS:
;	DC.L	$0028002C,$00300034,$0038003C,$00400044 ; 01234567
;	DC.L	$0048004C,$0528052C,$05300534,$0538053C	; 89ABCDEF
;	DC.L	$05400544,$0548054C,$0A280A2C,$0A300A34 ; GHIJKLMN
;	DC.L	$0A380A3C,$0A400A44,$0A480A4C,$0F280F2C ; OPQRSTUV
;	DC.L	$0F300F34,$0F380F3C,$0F400F44,$0F480F4C ; WXYZ.:,"
;	DC.L	$1428142C,$14301434,$1438143C,$14401444 ; @!?()?; 

; character offsets recalculated to use the raw ripped font.
	dc.w	$0000,$0004,$0008,$000c,$0010,$0014,$0018,$001C,$0020,$0024		; 0123456789
	dc.w	$0500,$0504,$0508,$050c,$0510,$0514,$0518,$051C,$0520,$0524		; ABCDEFGHIJ
	dc.w	$0a00,$0a04,$0a08,$0a0c,$0a10,$0a14,$0a18,$0a1C,$0a20,$0a24		; KLMNOPQRST
	dc.w	$0f00,$0f04,$0f08,$0f0c,$0f10,$0f14,$0f18,$0f1C,$0f20,$0f24		; UVWXYZ.:,"
	dc.w	$1400,$1404,$1408,$140c,$1410,$1414,$1418,$141C					; @!?()-; 


; The order of the letters in the font graphic
ASCIIVALUES:
	DC.B	'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.:,"@!?()-; '

	EVEN

; The text to scroll. $05 is a control byte, followed by a speed - $01 fastest
SCROLLER:
	DC.B	'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.:,"@!?()-; '
	dc.b	'   BIG-'
	dc.B	$05,$01
	dc.b	'BYTE '
	dc.B	$05,$03
	dc.B	'IS PROUD TO PRESENT A CHAR-SINE SCROLLER IN 1988 ---  SCROLLTEXT WRAPS  ---    '

	EVEN
; The font graphic 320x200
FONT:
;	INCLUDE 'font.s'

; raw font could be 320x160
	INCBIN 'font.raw'

	EVEN
; The colour palette.
COLOURPALETTE:
	DC.W	$0000,$0ECA,$00DD,$00AA,$0088,$0055,$0032,$03CF

; Include soundtracker player and module.
	EVEN
	INCLUDE 'include/SoundTracker_v2.3.s'
	EVEN
	INCBIN	'demondownloader.mod'

; Reserve space for the screen in chip memory.
	SECTION S_1,BSS,CHIP

SCREEN:
	DS.W	1			;13CA4
LAB_0086:
	DS.L	479			;13CA6
	DS.W	1
LAB_0087:
	DS.L	1920			;14424
	DS.W	1
LAB_0088:
	DS.L	2400			;16226
LAB_0089:
	DS.L	2399			;187A6
	DS.W	1
HIDDEN:
	DS.L	480			;1AD24
LAB_008B:
	DS.L	1			;1B4A4
LAB_008C:
	DS.L	10			;1B4A8
LAB_008D:
	DS.L	6709			;1B4D0
	END
